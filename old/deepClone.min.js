
function deepClone(obj={},{setPrototype=!1,invokeConstructors=!0,copyNonEnumerables=!1,copySymbols=!1,copyGettersSetters=!1,}={}){if(!obj||typeof obj!='object'){throw new TypeError(`TypeError: invalid 'obj' argument's type`)}
const config={setPrototype,invokeConstructors,copyNonEnumerables,copySymbols,copyGettersSetters,};if(typeof setPrototype!='boolean'){throw new TypeError(`TypeError: invalid 'setPrototype' flag's type`)}
if(typeof invokeConstructors!='boolean'){throw new TypeError(`TypeError: invalid 'invokeConstructors' flag's type`)}
if(typeof copyNonEnumerables!='boolean'){throw new TypeError(`TypeError: invalid 'copyNonEnumerables' flag's type`)}
if(typeof copySymbols!='boolean'){throw new TypeError(`TypeError: invalid 'copySymbols' flag's type`)}
if(typeof copyGettersSetters!='boolean'){throw new TypeError(`TypeError: invalid 'copyGettersSetters' flag's type`)}
const references=new WeakMap;return(function realDeepCopy(source,{setPrototype,invokeConstructors,copyNonEnumerables,copySymbols,copyGettersSetters,},references){references.set(source,source);let res=null;const ownPropsDcps=Object.getOwnPropertyDescriptors(source);if(invokeConstructors){res=new source.constructor()}else{if(setPrototype){res=Object.create(Object.getPrototypeOf(source))}else{res={}}}
const safeReferences=new WeakMap;Object.entries(ownPropsDcps).forEach(([prop,descriptor])=>{const{value,enumerable}=descriptor;if(!copyNonEnumerables&&!enumerable)return;if(!copySymbols&&typeof value=='symbol')return;if(!copyGettersSetters&&(descriptor.get||descriptor.set))return;if(value&&typeof value=='object'){if(references.has(value)){throw new TypeError('TypeError: circular reference found')}
if(safeReferences.has(value)){res[prop]=safeReferences.get(value);return}
if(value.constructor==String||value.constructor==Number||value.constructor==Boolean){descriptor.value=descriptor.value.valueOf();Object.defineProperty(res,prop,descriptor);return}
if(value.constructor==Date){descriptor.value=new Date(descriptor.value.getTime());Object.defineProperty(res,prop,descriptor);return}
res[prop]=realDeepCopy(value,{setPrototype,invokeConstructors,copyNonEnumerables,copySymbols,copyGettersSetters,},references);safeReferences.set(value,res[prop])}else{Object.defineProperty(res,prop,descriptor)}});return res})(obj,config,references)}
